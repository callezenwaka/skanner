#!/bin/sh
# Pre-commit hook for transquotation scanning
# This hook scans your staged files for quotation mark inconsistencies

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Transquotation Scanner - Pre-commit Hook${NC}"
echo "Scanning staged files for quotation mark issues..."

# Get the directory where this hook is located
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCANNER_PATH="$HOOK_DIR/skanner"

# Check if the scanner exists
if [ ! -f "$SCANNER_PATH" ]; then
    echo "${YELLOW}‚ö†Ô∏è  Transquotation scanner not found at $SCANNER_PATH${NC}"
    echo "Building scanner..."
    
    # Try to build the scanner
    if command -v go >/dev/null 2>&1; then
        cd "$HOOK_DIR"
        go build -o skanner main.go
        if [ $? -eq 0 ]; then
            echo "${GREEN}‚úì Scanner built successfully${NC}"
        else
            echo "${RED}‚úó Failed to build scanner${NC}"
            exit 1
        fi
    else
        echo "${RED}‚úó Go not found. Please install Go or build the scanner manually.${NC}"
        exit 1
    fi
fi

# Make sure the scanner is executable
chmod +x "$SCANNER_PATH"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "${GREEN}‚úì No staged files to scan${NC}"
    exit 0
fi

echo "Found ${#STAGED_FILES[@]} staged files to scan"

# Create a temporary file list for the scanner
TEMP_FILE_LIST=$(mktemp)
for file in $STAGED_FILES; do
    echo "$file" >> "$TEMP_FILE_LIST"
done

# Run the scanner on staged files
echo "Running transquotation scanner..."
"$SCANNER_PATH" --include "$(cat "$TEMP_FILE_LIST" | tr '\n' ',')" --verbose

SCANNER_EXIT_CODE=$?

# Clean up temporary file
rm "$TEMP_FILE_LIST"

# Check scanner results
if [ $SCANNER_EXIT_CODE -eq 0 ]; then
    echo "${GREEN}‚úì No quotation mark issues found${NC}"
    exit 0
elif [ $SCANNER_EXIT_CODE -eq 1 ]; then
    echo "${RED}‚úó Critical quotation mark issues found${NC}"
    echo "Please fix these issues before committing:"
    echo "1. Unbalanced quotes"
    echo "2. File reading errors"
    echo "3. Other critical issues"
    exit 1
elif [ $SCANNER_EXIT_CODE -eq 2 ]; then
    echo "${YELLOW}‚ö†Ô∏è  Quotation mark warnings found${NC}"
    echo "Consider fixing these issues for better code quality:"
    echo "1. Smart quotes (curly quotes)"
    echo "2. Line length issues"
    echo "3. Mixed quote types"
    
    # Ask user if they want to continue
    echo ""
    read -p "Do you want to continue with the commit? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "${YELLOW}‚ö†Ô∏è  Proceeding with commit despite warnings${NC}"
        exit 0
    else
        echo "${BLUE}Commit aborted. Please fix the warnings and try again.${NC}"
        exit 1
    fi
else
    echo "${RED}‚úó Unexpected error from scanner (exit code: $SCANNER_EXIT_CODE)${NC}"
    exit 1
fi
